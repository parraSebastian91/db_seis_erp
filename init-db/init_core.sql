-- =============================================================================
-- Script de inicialización de Base de Datos - ERP Core
-- =============================================================================

-- Crear el esquema core
CREATE SCHEMA IF NOT EXISTS core;

-- Otorgar permisos al usuario desarrollo
GRANT ALL PRIVILEGES ON SCHEMA core TO desarrollo;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA core TO desarrollo;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA core TO desarrollo;

-- Configurar búsqueda por defecto para incluir el esquema core
ALTER DATABASE core_erp SET search_path TO core,public;

-- Usar el esquema core explícitamente
SET search_path TO core,public;

CREATE TABLE core.tipo_contacto (
  tipo_contacto_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(50),
  descripcion VARCHAR(50)
);

CREATE TABLE core.contacto (
  contacto_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(50),
  direccion VARCHAR(50),
  celular VARCHAR(50),
  correo VARCHAR(50),
  redes_sociales TEXT,
  url TEXT,
  imagen_base64 VARCHAR,
  tipo_contacto_id BIGINT
);

CREATE TABLE core.organizacion (
  organizacion_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  razon_social VARCHAR,
  rut VARCHAR,
  dv char(1),
  giro VARCHAR,
  logo_base64 TEXT,
  contacto_id BIGINT
);

CREATE TABLE core.cuenta_bancaria (
  cuenta_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_titular VARCHAR,
  banco VARCHAR,
  numero VARCHAR,
  correo_contacto VARCHAR,
  rut_titular VARCHAR,
  organizacion_id BIGINT
);

CREATE TABLE core.sistema (
  sistema_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR,
  path VARCHAR,
  descripcion VARCHAR,
  activo BOOLEAN
);

CREATE TABLE core.modulo (
  modulo_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR,
  path VARCHAR,
  descripcion VARCHAR,
  activo BOOLEAN DEFAULT true,
  sistema_id BIGINT
);

CREATE TABLE core.funcionalidad (
  funcionalidad_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR,
  descripcion VARCHAR,
  path VARCHAR, -- opcional: ruta de frontend Angular
  modulo_id BIGINT NOT NULL,
  activo BOOLEAN DEFAULT true,
  FOREIGN KEY (modulo_id) REFERENCES core.modulo (modulo_id)
);

CREATE TABLE core.organizacion_sistema (
  organizacion_id BIGINT NOT NULL,
  sistema_id BIGINT NOT NULL,
  PRIMARY KEY (organizacion_id, sistema_id)
);

CREATE TABLE core.rol (
  rol_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR,
  descripcion VARCHAR,
  codigo VARCHAR
);

CREATE TABLE core.permiso (
  permiso_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  per_nombre VARCHAR,
  per_desc VARCHAR,
  per_cod VARCHAR,
  per_activo BOOLEAN DEFAULT true
);

CREATE TABLE core.rol_modulo_permiso (
  rol_id BIGINT NOT NULL,
  modulo_id BIGINT NOT NULL,
  permiso_id BIGINT NOT NULL,
  PRIMARY KEY (rol_id, modulo_id, permiso_id)
);

CREATE TABLE core.usuario (
  usuario_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR,
  password_hash VARCHAR,
  fecha_creacion DATE,
  activo BOOLEAN DEFAULT true,
  fecha_actualizacion DATE NULL,
  contacto_id BIGINT
);

CREATE TABLE core.usuario_rol (
  usuario_id BIGINT NOT NULL,
  rol_id BIGINT NOT NULL,
  PRIMARY KEY (usuario_id, rol_id)
);

CREATE TABLE core.organizacion_contacto (
  contacto_id BIGINT NOT NULL,
  organizacion_id BIGINT NOT NULL,
  PRIMARY KEY (contacto_id, organizacion_id)
);

-- Foreign Keys
ALTER TABLE core.contacto ADD FOREIGN KEY (tipo_contacto_id) REFERENCES core.tipo_contacto (tipo_contacto_id);

ALTER TABLE core.organizacion_contacto ADD FOREIGN KEY (contacto_id) REFERENCES core.contacto (contacto_id);
ALTER TABLE core.organizacion_contacto ADD FOREIGN KEY (organizacion_id) REFERENCES core.organizacion (organizacion_id);

ALTER TABLE core.cuenta_bancaria ADD FOREIGN KEY (organizacion_id) REFERENCES core.organizacion (organizacion_id);

ALTER TABLE core.modulo ADD FOREIGN KEY (sistema_id) REFERENCES core.sistema (sistema_id);

-- Ya definida inline en la creación de la tabla funcionalidad
-- ALTER TABLE core.funcionalidad ADD FOREIGN KEY (modulo_id) REFERENCES core.modulo (modulo_id);

ALTER TABLE core.organizacion_sistema ADD FOREIGN KEY (organizacion_id) REFERENCES core.organizacion (organizacion_id);
ALTER TABLE core.organizacion_sistema ADD FOREIGN KEY (sistema_id) REFERENCES core.sistema (sistema_id);

ALTER TABLE core.rol_modulo_permiso ADD FOREIGN KEY (rol_id) REFERENCES core.rol (rol_id);
ALTER TABLE core.rol_modulo_permiso ADD FOREIGN KEY (modulo_id) REFERENCES core.modulo (modulo_id);
ALTER TABLE core.rol_modulo_permiso ADD FOREIGN KEY (permiso_id) REFERENCES core.permiso (permiso_id);

ALTER TABLE core.usuario ADD FOREIGN KEY (contacto_id) REFERENCES core.contacto (contacto_id);

ALTER TABLE core.usuario_rol ADD FOREIGN KEY (usuario_id) REFERENCES core.usuario (usuario_id);
ALTER TABLE core.usuario_rol ADD FOREIGN KEY (rol_id) REFERENCES core.rol (rol_id);

-- Mensaje de confirmación
DO $$
BEGIN
    RAISE NOTICE 'Base de datos inicializada correctamente para ERP Core';
END $$;