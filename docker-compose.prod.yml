services:
  # Aplicación NestJS - Producción
  ms-auth:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: core_erp_ms_auth_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    networks:
      - core_erp_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  postgres:
    image: postgres:15
    container_name: core_erp_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: core_erp
      POSTGRES_USER: desarrollo
      POSTGRES_PASSWORD: 071127
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - core_erp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U desarrollo -d core_erp"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: core_erp_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - core_erp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  core_erp_network:
    driver: bridge
